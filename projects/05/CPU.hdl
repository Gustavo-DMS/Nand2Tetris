// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Para decidir o tipo de instrução
    Not(in=instruction[15],out=aInstruction);
    Not(in=aInstruction,out=cInstruction);

    // Decidir de a origem do sinal para o RegisterA
    And(a=cInstruction,b=instruction[5],out=aluToA);
    Mux16(a=instruction ,b=aluOut ,sel=aluToA,out=muxALUxInstruction);
    Or(a=aInstruction,b=aluToA ,out=loadRegisterA); // se a instrução for A(inserir no RegA ou se o destino for pra o RegA)
    ARegister(in=muxALUxInstruction,load=loadRegisterA,out=aRegisterOut,out[0..14]=addressM);

    // Decidir se o sinal vem da Memoria ou do RegisterA
    And(a=cInstruction,b=instruction[4],out=loadRegisterD);
    Mux16(a=aRegisterOut,b=inM ,sel=instruction[12] ,out=muxAxinM);

    // Colocar Valores no RegisterD
    DRegister(in=aluOut ,load=loadRegisterD ,out=dRegisterOut );

    // Alu pegar os valores e fazer as contas
    ALU(x=dRegisterOut ,y=muxAxinM ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=aluOut,out=outM,zr=zero ,ng=negative);
    And(a=instruction[3],b=cInstruction,out=writeM);

    // Fazer as decisões para o PC
    And(a=instruction[1],b=zero,out=JEQ);
    And(a=instruction[2],b=negative,out=JLT);
    Or(a=zero,b=negative,out=zeroOrNegative);
    Not(in=zeroOrNegative,out=positive);
    And(a=instruction[0],b=positive,out=JGT);
    Or(a=JEQ,b=JLT,out=JLE);
    Or(a=JLE,b=JGT,out=jumpToA);
    And(a=jumpToA,b=cInstruction,out=pcLoad);
    Not(in=pcLoad,out=pcInc);
    PC(in=aRegisterOut ,load=pcLoad ,inc=pcInc ,reset=reset ,out[0..14]=pc );
}
